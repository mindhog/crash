# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

## Crash standard library.

import crack.ascii lstrip, radix, rstrip;
import crack.cont.array Array;
import crack.fs makePath;
import crack.io cerr, cout, Formatter, FStr, Reader, Seekable, Writer;
import crack.lang cmp, AppendBuffer, CString, Exception;
import crack.regex Regex;
import crack.strutil split;
import crack.sys env;
import crack.time Date, Time, TimeDelta, BILLION;
import .crash createRootContext, eval, Builtin, EvalContext, Obj, ObjOf, Value;
import .types BoolObj, IntObj;

@import .ann function;

@function(Reader) String read(int bytes) {
    return self.read(bytes);
}

## Read the entire contents of a file.
@function(Reader) String readAll() {
    AppendBuffer buf = {4096};
    while (chunk := self.read(4096)) {
        buf.extend(chunk);
    }
    return String(buf, true);
}

@function(Writer) int write(String data) {
    self.write(data);
    return 0;
}

## Returns the doc string for a value.
@function String doc(Value value) {
    return value.getDoc()
}

class ValueError : Exception {
    oper init(String message) : Exception(message) {}
}

## Open a file for read/write/append.
## Argument can be 'r', 'w', or 'a'.
@function Obj open(String filename, String mode) {
    result := Obj();
    if (mode == 'r') {
        reader := makePath(filename).reader();
        result.define('read', read(reader));
        result.define('readAll', readAll(reader));
    } else if (mode == 'w') {
        writer := makePath(filename).writer();
        result.define('write', write(writer));
    } else if (mode == 'a') {
        appender := makePath(filename).appender();
        result.define('write', write(appender));
    } else {
        throw ValueError(FStr() `Unknown open mode $(mode.getRepr())`);
    }
    return result;
}

const BLANKLINE_RX := Regex(r'\n\s*\n');

## Indents a multi-line string.
void indent(Formatter out, String data) {
    for (line :in split(rstrip(data), b'\n'))
        out `    $(lstrip(line))\n`;
}

class HelpCmd : Builtin {
    String getDoc() {
        return I'Show help on all names or those specified:
            help [command-name...]

            Lists all names in the current context along
            with their brief doc descriptions (if any).  If you provide
            arguments, these are the names of specific variables to show
            the complete doc-strings for.
            ';
    }

    Object invoke(EvalContext context, Array[Object] args) {
        if (!args) {
            frame := context.frame;
            while (frame) {
                for (def :in frame.vars.vars) {
                    cout `$(def.key):\n`;
                    doc := def.val.getDoc();
                    m := BLANKLINE_RX.search(doc);
                    if (m)
                        indent(cout, doc.substr(0, m.begin()));
                    else
                        indent(cout, doc);
                }
                frame = frame.parent;
            }
        } else {
            for (command :in args) {
                if (command := String.cast(command, null)) {
                    val := context.lookUp(command);
                    if (!val) {
                        cout `$command undefined\n`;
                    } else {
                        cout `$(command):\n`;
                        indent(cout, val.getDoc());
                    }
                } else if (val := Value.cast(command)) {
                    cout `$(val.getDoc())\n`;
                } else {
                    cout `$command is not a command name\n`;
                }
            }
        }
        return this;
    }
}

class LookUpCmd : Builtin {
    String getDoc() {
        return I'\
            Returns a value object for a given name:
            lookUp <name>

            A Value is a function or the holder for a simple value.  It also
            has a doc string, so the main current use for this built-in is
            to convert a name to a parameter for "doc".

            Example:
                doc [lookUp foo]
            ';
    }

    Object invoke(EvalContext context, Array[Object] args) {
        if (args.count() != 1)
            throw Exception('Usage: lookUp <name>');
        arg := String.cast(args[0], null);
        if (arg is null)
            throw Exception('The name value in lookUp must be a string.');

        return context.lookUp(arg);
    }
}

## Returns true if the specified file exists.
@function bool exists(String filename) {
    return makePath(filename).exists();
}

class DateTime : Date {

    ## Seconds since the epoch.
    int64 __secs;

    ## Nano-seconds since the start of the last second.
    int __nsecs;

    @final int64 oper .secondsSinceEpoch() { return __secs }
    @final int oper .nsecs() { return __nsecs }

    oper init(int64 secs, int nsecs) :
        Date(secs),
        __secs = secs,
        __nsecs = nsecs {
    }

    ## Returns the UTC timestamp in ISO 8601 format.
    String isoformat() {
        d := this;
        if (tm_gmtoff)
            d = DateTime(__secs - tm_gmtoff, __nsecs);
        return d.formatTime('%Y-%m-%dT%H:%M:%SZ');
    }

    String toString() {
        int abs(int val) { return val > 0 ? val : -val }
        String pad(uint val) {
            return val < 10 ? '0' + radix(val, 10) : radix(val, 10);
        }

        off := abs(tm_gmtoff);
        tzhr := pad(off / 3600);
        tzmin := pad(off / 60 % 60);
        tz := tm_gmtoff > 0 ? FStr() `+$tzhr:$tzmin` : FStr() `-$tzhr:$tzmin`;
        return formatTime('%Y-%m-%dT%H:%M:%S' + tz);
    }

    void formatTo(Formatter out) { out.write(toString()) }

    DateTime oper +(TimeDelta td) {
        t := __secs + td.secs;
        ns := __nsecs + td.nsecs;
        if (ns >= BILLION) {
            ns -= BILLION;
            # It's possible for a denormalized TimeDelta to contain a
            # value greater than 2 BILLION, but we should only be dealing with
            # normalized values, here.
            t += 1;
        } else if (ns < 0) {
            # Again, only need to worry about normalized values.
            ns += BILLION;
            t -= 1;
        }

        return DateTime(t, ns);
    }

    DateTime oper -(TimeDelta td) {
        return this + TimeDelta(-td.secs, -td.nsecs);
    }

    ObjOf[DateTime] wrap() {
        result := ObjOf[DateTime](this);

        alias MyObj = ObjOf[DateTime];

        @function(DateTime) String isoformat() { return self.isoformat() }
        @function(DateTime) MyObj plus(TimeDelta delta) {
            return (self + delta).wrap();
        }
        @function(DateTime) MyObj minus(TimeDelta delta) {
            return (self - delta).wrap();
        }
        @function(DateTime) String toString() { return self.toString() }

        ## Returns the unix time (seconds since the epoch).
        @function(DateTime) int secondsSinceEpoch() {
            return int(self.secondsSinceEpoch);
        }

        ## Returns nanoseconds since the last second.
        @function(DateTime) int nsecs() { return self.nsecs }

        result.define('isoformat', isoformat(this));
        result.define('+', plus(this));
        result.define('-', minus(this));
        result.define('toString', toString(this));
        result.define('secondsSinceEpoch', secondsSinceEpoch(this));
        result.define('nsecs', nsecs(this));
        return result;
    }

    int cmp(DateTime other) {
        return cmp(__secs, other.__secs);
    }

    int cmp(Object other) {
        if (dt := DateTime.cast(other, null))
            return cmp(dt);
        else
            return Object.cmp(other);
    }
}

alias DateTimeObj = ObjOf[DateTime];

const Regex
    LOCAL_RX = Regex(r'\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$'),
    TZ_RX = Regex(r'\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(.+)$');

## returns a new DateTime object.
##
## This accepts a single argument which can either be an iso 8660 style
## timestamp or the value "now", indicating that the time should be the
## current time.
##
## A timestamp must be in ISO 8601 format and have one of:
## - the "Z" suffix, indicating that it is UTC.
## - Another suffix, which must be a valid timezone known to the system (e.g.
##   GMT, EST, PST, US/Eastern...  The results of specifying an invalid
##   timezone are undefined).
## - No suffix, indicating local time.
##
## Examples:
##   DateTime now                    # Current time.
##   DateTime 2021-12-23T18:11:34Z   # UTC timestamp.
##   DateTime 2021-12-23T18:11:34EST # US Eastern timestamp.
@function DateTimeObj dateTime(String spec) {
    if (spec == 'now') {
        time := Time.now();
        return DateTime(time.secs, time.nsecs).wrap();
    } else if (LOCAL_RX.match(spec)) {
        return DateTime(Date.parseTime(CString(spec), '%Y-%m-%dT%H:%M:%S')
                            .getSeconds(),
                        0
                        ).wrap();
    } else if (m := TZ_RX.match(spec)) {
        oldTZ := env['TZ'];
        env['TZ'] = m.group(1);
        DateTime result;
        try {
            result = DateTime(
                Date.parseTime(CString(spec), '%Y-%m-%dT%H:%M:%S')
                    .getSeconds(),
                0
            );
        } catch (Exception ex) {
            env['TZ'] = oldTZ;
            DateTime.parseTime(CString(spec), '%Y-%m-%dT%H:%M:%S');
            throw ex;
        }
        env['TZ'] = oldTZ;

        # We call getSeconds() on a fresh DateTime object in order to restore
        # the global timezone variable after messing with the timezone.
        DateTime(0, 0).getSeconds();
        return result.wrap();
    } else {
        throw Exception('Unrecognized timestamp format');
    }
}

@function TimeDelta hours(int amount) {
    return TimeDelta(int32(3600 * amount), 0);
}
@function TimeDelta minutes(int amount) {
    return TimeDelta(int32(60 * amount), 0);
}
@function TimeDelta seconds(int amount) { return TimeDelta(int32(amount), 0) }
@function TimeDelta millis(int amount) {
    secs := amount / 1000;
    nsecs := int32((amount % 1000) * 1000000);
    return TimeDelta(int32(secs), nsecs);
}

## Returns a module object for the standard library.
##
## Functions defined are:
##  open <filename> <mode>
##  doc
##  help [command...]
##  lookUp <name>
##  exists <filename>
@function Obj stdlib() {
    obj := Obj();
    obj.define('open', open());
    obj.define('doc', doc());
    obj.define('help', HelpCmd());
    obj.define('lookUp', LookUpCmd());
    obj.define('exists', exists());
    obj.define('DateTime', dateTime());
    obj.define('hours', hours());
    obj.define('minutes', minutes());
    obj.define('seconds', seconds());
    obj.define('millis', millis());
    return obj;
}