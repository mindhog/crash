# Copyright 2020 Google LLC
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     https://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

## Annotations for exposing functions to the TEL interpreter.
## 
## To use this, you'll need the following imports:
##   import crack.cont.array Array;
##   import tel.ast BuiltinTypes, Expr, IntObj, Type, Operation;
##   import tel.builtins ConstRefOp;
##   import tel.synlib ParseContext;
##   import tel.prim getRegisteredType, ExtFuncOp, TypeParmCommand;
##   import tel.ann function;
##
## Define a function like this:
##   @function 


import crack.ann readBlock, readDelimited, NodeList, NodeListImpl, Tok;
import crack.compiler CrackContext, Token, TOK_LPAREN, TOK_POPERRCTX,
    TOK_RPAREN;
import crack.cont.array Array;
import crack.io cerr, FStr, StringFormatter;
import crack.lang Exception;
import crack.strutil split;

@import crack.ann SCOPE_NAME;

class Arg {
    String type, name;
    oper init(String type, String name) : type = type, name = name {}
}

void checkIdent(CrackContext ctx, Token tok) {
    if (!tok.isIdent())
        ctx.error(tok, 
                  FStr() `Expected identifier, got $(tok.getText())\0`.buffer
                  );
}

Token getIdent(CrackContext ctx) {
    tok := ctx.getToken();
    checkIdent(ctx, tok);
    return tok;
}

## Returns a string to convert the crash argument to its corresponding crack
## type.
String convertArg(Arg arg, int index) {
    if (arg.type == 'int')
        return FStr() `IntObj.convert(args[$index]).val`;
    else if (arg.type == 'bool')
        return FStr() `BoolObj.convert(args[$index]).val`;
    else if (arg.type == 'float')
        return FStr() `FloatObj.convert(args[$index]).val`;
    else
        return FStr() I`$(arg.type).cast(convert(args[$index], $(arg.type)))`;
}

String convertResult(NodeList crackType) {
    t := crackType.toString(null);
    if (t == 'int')
        return 'IntObj';
    else if (t == 'bool')
        return 'BoolObj';
    else if (t == 'float')
        return 'FloatObj';
    else
        return '';
}

## Returns the module prefix of the crash tree in a form amenable to
## prepending to an import module name.  For example, if this module,
## crash.ann, was imported as "crash.ann", this would return "crash.".  If it
## were imported simply as "ann", this would return the empty string.
String _getCrashPrefix() {
    curScope := split(@SCOPE_NAME, b'.');
    curScope.pop();
    curScope.pop();
    return curScope ? curScope.join('.') + '.' : '';
}

## Parse a type.
## We don't use crack.ann.Type.parse() for this because that's currently
## broken for nested types.
NodeList parseType(CrackContext ctx, NodeList result) {
    tok := ctx.getToken();
    if (!tok.isIdent())
        ctx.error(tok, 'Identifier expected for type name'.buffer);
    String name = {tok.getText()};
    result.pushHead(Tok(tok));

    # Check for nested types.
    tok = ctx.getToken();
    while (tok.isDot() || tok.isScoping()) {
        result.pushHead(Tok(tok));
        result.pushHead(Tok(getIdent(ctx)));
        tok = ctx.getToken();
    }

    if (tok.isLBracket()) {
        # got a left bracket, parse the type parameters
        result.pushHead(Tok(tok));
        while (true) {
            parseType(ctx, result);
            tok = ctx.getToken();
            result.pushHead(Tok(tok));
            if (tok.isRBracket()) {
                break;
            } else if (!tok.isComma()) {
                text := 'Comma or right bracket expected in type definition';
                ctx.error(tok, text.buffer)
            }
        }

    } else {
        ctx.putBack(tok);
    }

    return result;
}

NodeList parseType(CrackContext ctx) {
    return parseType(ctx, NodeListImpl());
}


void _function(CrackContext ctx, bool newMethod) {
    String className;

    docs := ctx.consumeDocs();
    loc := ctx.getLocation();

    bool passWrap;  # Pass the ObjOf wrapper into the function as "wrap".
    bool passContext;  # Pass the EvalContext into the function as "ctx".

    # See if we've got a receiver type.
    NodeList receiverType;
    tok := ctx.getToken();
    if (tok.isLParen()) {
        while (true) {
            tok = ctx.getToken();
            if (tok.isRParen())
                break;

            # Check for a keyword ("wrap" or "ctx")
            bool gotKeyword;
            if (tok.isIdent()) {
                tokText := StaticString(tok.getText());
                if (tokText == 'wrap')
                    passWrap = gotKeyword = true;
                else if (tokText == 'ctx')
                    passContext = gotKeyword = true;
                else
                    ctx.putBack(tok);
            }

            if (!gotKeyword) {
                # Parse a type.
                if (receiverType)
                    ctx.error(
                        tok,
                        'Already parsed type, expecting keyword or closing '
                        'paren.'.buffer
                    );

                receiverType = parseType(ctx);
            }

            tok = ctx.getToken();
            if (tok.isRParen())
                break;
            else if (!tok.isComma())
                ctx.error(tok, 'Comma or closing paren expected.'.buffer);
        }
    } else {
        ctx.putBack(tok);
    }

    if (newMethod && !receiverType)
        ctx.error(tok, 'Expecting receiver type.'.buffer);

    # read the return type
    retType := parseType(ctx);
    
    # read the name
    tok = getIdent(ctx);
    String funcName = String(tok.getText());

    # if we get a dot, the first identifier is a class name
    tok = ctx.getToken();
    if (tok.isDot()) {
        # this is of the form ClassName.method()
        className = funcName;
        tok = getIdent(ctx);
        funcName = String(tok.getText());
    }

    # get the paren and arg list.    
    if (!tok.isLParen()) 
        ctx.error(tok, 
                  FStr() `Expected left paren, got $(tok.getText())\0`.buffer
                  );

    Array[Arg] args = {};    
    tok = ctx.getToken();
    while (true) {
        if (tok.isRParen())
            break;
        else if (!tok.isComma())
            ctx.putBack(tok);
        
        # should be a type identifier
        type := parseType(ctx);
        arg := Arg(type.toString(null), null);

        # get the arg name
        tok = getIdent(ctx);
        arg.name = String(tok.getText());
        
        args.append(arg);
        tok = ctx.getToken();
        if (!tok.isComma() && !tok.isRParen())        
            ctx.error(
                tok, 
                FStr() I`Comma or closing paren expected, \
                         got $(tok.getText())\0`.buffer
            );
    }

    # parse the function body
    body := readBlock(ctx);

    # Generate two blocks: block1 is the code before the body is expanded, 
    # block2 is the code after the body is expanded.
    StringFormatter out = {};
    out I`    
        class $funcName : Builtin {
        `;
    block1 := out.cString();
    out = StringFormatter();

    if (docs)
        out I`
            String getDoc() {
                return $(docs ? String(docs).getRepr() : "null");
            }
        `;

    out I`
            @final $retType __call(\n`;
    
    # Emit the special parameters.
    if (passContext)
        out `        EvalContext ctx,\n`;
    if (passWrap)
        out `        ObjOf[$receiverType] wrap,\n`;
    if (newMethod)
        out `        $receiverType self,\n`;

    for (arg :in args)
        out `        $(arg.type) $(arg.name),\n`;
    
    out `)`;
    
    block2 := out.cString();
    out = StringFormatter();
    
    out I`
            Object invoke(EvalContext context, Array[Object] args) {
                import $(_getCrashPrefix())crash convert;
        `;

    if (passWrap || newMethod)
        out `        wrap := ObjOf[$receiverType].cast(context.receiver);\n`;

    out I`
                result := __call(
        `;

    if (passContext)
        out `       context,\n`;
    if (passWrap)
        out `       wrap,\n`;
    if (newMethod)
        out `       wrap.inst,\n`;

    int i;    
    for (arg :in args) {
        out `        $(convertArg(arg, i++)),`;
    }
    out I`\
                );
            
                return $(convertResult(retType))(result);
            }

            Array[ParmInfo] getParmInfo() {
                return Array[ParmInfo]![
        `;

    for (arg :in args)
        out `ParmInfo.create("$(arg.name)", $(arg.type)), `;
    out I`\
                ];
            }
        }
        `;

    block3 := out.cString();

    ctx.putBack(Token(TOK_POPERRCTX, '[pop error context]'.buffer, loc));
    ctx.inject(@FILE.buffer, @LINE, block3.buffer);
    body.expand(ctx, null);
    ctx.inject(@FILE.buffer, @LINE, block2.buffer);
    if (receiverType && !newMethod) {
        # Emitting this:
        #   $receiverType self;
        #   oper init($receiverType self) : self = self {}
        ctx.inject(@FILE.buffer, @LINE, ' self) : self = self {}\n'.buffer);
        receiverType.expand(ctx, null);
        ctx.inject(@FILE.buffer, @LINE, ' self;\noper init('.buffer);
        receiverType.expand(ctx, null);
    }
    ctx.inject(@FILE.buffer, @LINE, block1.buffer);
    ctx.pushErrorContext(
        FStr() I`Expanded from $(newMethod ? '@method' : '@function') at \
                 $(loc.getName()):$(loc.getLineNumber())\0`.buffer
    );
}

void function(CrackContext ctx) {
    _function(ctx, false);
}

void method(CrackContext ctx) {
    _function(ctx, true);
}
