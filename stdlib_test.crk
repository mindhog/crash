# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import crack.cont.array Array;
import crack.io cout, cerr, StringFormatter;
import crack.lang Exception;
import crack.sys env;
import crash createRootContext, eval, parseString, Builtin, EvalContext,
    ANY_TYPE, API, PPI;
import stdlib stdlib;
import types BoolObj, IntObj, Number;

@import crack.ann assert;

class TestFunc : Builtin {
    Object invoke(EvalContext context, Array[Object] args) {
        return null;
    }

    API getParmInfo() {
        return API![
            PPI('a', String),
            PPI('foo', ANY_TYPE),
            PPI('rest', Object, true)
        ];
    }

    String getDoc() {
        return I'\
            Doc string.

            This is the document body.
            ';
    }
}

Object ev(String code) {
    ctx := createRootContext();
    ctx.define('stdlib', stdlib());
    ctx.define('testfunc', TestFunc());
    return eval(code, ctx);
}

result := ev(I"
    import [stdlib] open
    var dst [open /tmp/testfile.dat w]
    dst write 'test string\n'
    var src [open /tmp/testfile.dat r]
    var data [src read 1024]
    set src [open /tmp/testfile.dat r]
    format $data [src readAll]
    ");
@assert(result == 'test string\ntest string\n');

result = ev(I"
    import [stdlib] open exists
    [open /tmp/testfile2.dat w] write 'some data'
    var result [exists /tmp/testfile2.dat]
    proc rm /tmp/testfile2.dat
    give $result
    ");
@assert(result == BoolObj(true));

result = ev(I"
    import [stdlib] exists
    exists /tmp/testfile2.dat
    ");
@assert(result == BoolObj(false));

@assert(ev(I"import [stdlib] doc; doc $doc") ==
        ' Returns the doc string for a value.\n');

@assert(ev(I"\
    import [stdlib] doc lookUp
    var x 100 'variable documentation'
    doc [lookUp x]
    ") == 'variable documentation');

@assert(ev(I"\
    import [stdlib] doc lookUp
    def f {} 'function documentation' { print foo }
    doc [lookUp f]
    ") == 'function documentation');

# DateTime.

# Local timezone.
env['TZ'] = 'US/Eastern';
@assert(ev(I"
    import [stdlib] DateTime hours minutes seconds millis
    [DateTime 2021-12-23T14:48:35] toString
    ") == '2021-12-23T14:48:35-05:00');

# ISO format.
@assert(ev(I"
    import [stdlib] DateTime hours minutes seconds millis
    [DateTime 2021-12-23T14:48:35] isoformat
    ") == '2021-12-23T19:48:35Z');

# Timezone parsing.
@assert(ev(I"
    import [stdlib] DateTime hours minutes seconds millis
    [DateTime 2021-12-23T14:48:35US/Pacific] toString
    ") == '2021-12-23T14:48:35-08:00');
@assert(env['TZ'] == 'US/Eastern');

# Timezones don't corrupt default (local).
@assert(ev(I"
    import [stdlib] DateTime hours minutes seconds millis
    [DateTime 2021-12-23T14:48:35US/Pacific]
    [DateTime 2021-12-23T14:48:35] toString
    ") == '2021-12-23T14:48:35-05:00');
@assert(env['TZ'] == 'US/Eastern');

# Now.
@assert(ev(I"
    import [stdlib] DateTime hours minutes seconds millis
    var now [DateTime now]
    var isonow [DateTime [now isoformat]] '\n'
    == $now $isonow
    "));

# Deltas.
@assert(ev(I"
    import [stdlib] DateTime hours minutes seconds millis
    [[DateTime 2021-12-23T14:48:35Z] - [hours 1]] isoformat
    ") == '2021-12-23T13:48:35Z');
@assert(ev(I"
    import [stdlib] DateTime hours minutes seconds millis
    [[DateTime 2021-12-23T14:48:35Z] + [hours 1]] isoformat
    ") == '2021-12-23T15:48:35Z');
@assert(ev(I"
    import [stdlib] DateTime hours minutes seconds millis
    [[DateTime 2021-12-23T14:48:35Z] - [minutes 1]] isoformat
    ") == '2021-12-23T14:47:35Z');
@assert(ev(I"
    import [stdlib] DateTime hours minutes seconds millis
    [[DateTime 2021-12-23T14:48:35Z] + [minutes 1]] isoformat
    ") == '2021-12-23T14:49:35Z');
@assert(ev(I"
    import [stdlib] DateTime hours minutes seconds millis
    [[DateTime 2021-12-23T14:48:35Z] - [seconds 1]] isoformat
    ") == '2021-12-23T14:48:34Z');
@assert(ev(I"
    import [stdlib] DateTime hours minutes seconds millis
    [[DateTime 2021-12-23T14:48:35Z] + [seconds 1]] isoformat
    ") == '2021-12-23T14:48:36Z');
@assert(ev(I"
    import [stdlib] DateTime hours minutes seconds millis
    [[DateTime 2021-12-23T14:48:35Z] - [millis 1000]] isoformat
    ") == '2021-12-23T14:48:34Z');
@assert(ev(I"
    import [stdlib] DateTime hours minutes seconds millis
    [[DateTime 2021-12-23T14:48:35Z] + [millis 1000]] isoformat
    ") == '2021-12-23T14:48:36Z');
@assert(ev(I"
    import [stdlib] DateTime hours minutes seconds millis
    [[DateTime 2021-12-23T14:48:35Z] + [millis 1]] nsecs
    ") == IntObj(1000000));
@assert(ev(I"
    import [stdlib] DateTime hours minutes seconds millis
    var dt [[DateTime 2021-12-23T14:48:35Z] - [millis 1]]
    format [dt isoformat] ' ' [dt nsecs]
    ") == '2021-12-23T14:48:34Z 999000000');
@assert(ev(I"
    import [stdlib] DateTime hours minutes seconds millis
    var dt [[DateTime 2021-12-23T14:48:35Z] + [millis 1001]]
    format [dt isoformat] ' ' [dt nsecs]
    ") == '2021-12-23T14:48:36Z 1000000');
@assert(ev(I"
    import [stdlib] DateTime hours minutes seconds millis
    var dt [[DateTime 2021-12-23T14:48:35Z] + [millis -1001]]
    format [dt isoformat] ' ' [dt nsecs]
    ") == '2021-12-23T14:48:33Z 999000000');

# Test help by capturing standard output.
oldCout := cout;
cout = capturedOut := StringFormatter();
ev(I"\
    import [stdlib] help
    help testfunc
    "
);
cout = oldCout;
@assert(capturedOut.string() ==
        'testfunc a:String foo rest:Object...:\012'
        '    Doc string.\012'
        '    \012'
        '    This is the document body.\012'
        );

@assert(Number.convertNum('2') > Number.convertNum('1'));
@assert(Number.convertNum('2') >= Number.convertNum('1'));
@assert(Number.convertNum('2') >= Number.convertNum('2'));
@assert(Number.convertNum('1') < Number.convertNum('2'));
@assert(Number.convertNum('1') <= Number.convertNum('2'));
@assert(Number.convertNum('1.5') > Number.convertNum('1'));
@assert(Number.convertNum('2') > Number.convertNum('1.5'));
@assert(Number.convertNum('2.5') > Number.convertNum('1.5'));

cerr `ok\n`;
