
import crack.io cout, cerr;
import crack.lang Exception;
import crash createRootContext, eval, parseString;
import stdlib stdlib;
import types BoolObj;

@import crack.ann assert;

Object ev(String code) {
    ctx := createRootContext();
    ctx.define('stdlib', stdlib());
    return eval(code, ctx);
}

result := ev(I"
    import [stdlib] open
    var dst [open /tmp/testfile.dat w]
    dst write 'test string\n'
    var src [open /tmp/testfile.dat r]
    var data [src read 1024]
    set src [open /tmp/testfile.dat r]
    format $data [src readAll]
    ");
@assert(result == 'test string\ntest string\n');
cerr `ok\n`;

result = ev(I"
    import [stdlib] open exists
    [open /tmp/testfile2.dat w] write 'some data'
    var result [exists /tmp/testfile2.dat]
    proc rm /tmp/testfile2.dat
    give $result
    ");
@assert(result == BoolObj(true));

result = ev(I"
    import [stdlib] exists
    exists /tmp/testfile2.dat
    ");
@assert(result == BoolObj(false));

@assert(ev(I"import [stdlib] doc; doc $doc") ==
        ' Returns the doc string for a value.\n');

@assert(ev(I"\
    import [stdlib] doc lookUp
    var x 100 'variable documentation'
    doc [lookUp x]
    ") == 'variable documentation');

@assert(ev(I"\
    import [stdlib] doc lookUp
    def f {} 'function documentation' { print foo }
    doc [lookUp f]
    ") == 'function documentation');
