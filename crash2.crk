# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import crack.cont.array Array;
import crack.cont.hashmap HashMap;
import crack.fs makePath;
import crack.io cin, cout, cerr, readAll, FStr;
import crack.lang Exception;

import .ast Expr, FuncDef, List, FloatLiteral, FuncCall, IfStmt,
    IntegerLiteral, Node, SrcLoc, StaticList, StringLiteral, VarDef;
import .crash createRootContext, eval, ActiveFunc, Block, Command, CrashError,
    EvalContext, InterpExpr, LiteralStringTerm, SimpleValue,
    V1SrcLoc = SrcLoc, Term, VarRef, V1StringLiteral = StringLiteral, Value;
import .parser parseString;
import .repl REPLBase;
import .types IntObj, FloatObj;

@import crack.ann cvars, impl, interface, SCOPE_NAME;

@interface ExprWrapper {
    @abstract Value asValue();
    @abstract Term asTerm();
    @abstract Object evaluate(EvalContext ctx);
}

class BlockExprWrapper @impl ExprWrapper  {
    Block block;
    oper init(Block block) : block = block {}
    Value asValue() { return SimpleValue(block) }
    Term asTerm() { return InterpExpr(block) }
    Object evaluate(EvalContext ctx) { return eval(block, ctx) }
}

# Returns an object that converts a non-term Value to a Term
class ValueTerm : Term {
    @cvars {
        Value __value;
    }
    Object evaluate(EvalContext ctx) { return __value.evaluate(ctx) }
    V1SrcLoc getSrcLoc() { return __value.getSrcLoc() }
}

class ValueExprWrapper @impl ExprWrapper {
    Value value;
    oper init(Value value) : value = value {}
    Value asValue() { return value }
    Term asTerm() {
        return ValueTerm(value);
    }

    Object evaluate(EvalContext ctx) {
        block := Block();
        block.add(value);
        return eval(block, ctx);
    }
}

class LiteralObjectTerm : Term {
    Object val;
    V1SrcLoc loc;
    oper init(Object val, V1SrcLoc loc) : val = val, loc = loc {}
    Object evaluate(EvalContext context) { return val }
    V1SrcLoc getSrcLoc() { return loc }
}

class LiteralObjectWrapper @impl ExprWrapper {
    Object val;
    V1SrcLoc loc;
    oper init(Object val, V1SrcLoc loc) : val = val, loc = loc {}
    Value asValue() { return SimpleValue(val) }
    Term asTerm() { return LiteralObjectTerm(val, loc) }
    Object evaluate(EvalContext ctx) { return val }
}

@abstract class LimitedValue : Value {
    V1SrcLoc __loc;

    oper init(V1SrcLoc loc) : __loc = loc {}

    V1SrcLoc getSrcLoc() { return __loc }
    void set(Object value) {
        throw Exception(
            FStr() `"set" method not defined for $(this.class.name).`
        );
    }

    Object invoke(EvalContext context, Array[Object] args) {
        throw Exception(
            FStr() `"invoke" method not defined for $(this.class.name).`
        );
    }
}

class IfStmtValue : LimitedValue {
    Value cond;
    Term onTrue, onFalse;

    oper init(V1SrcLoc loc, Value cond, Term onTrue, Term onFalse) :
        LimitedValue(loc),
        cond = cond,
        onTrue = onTrue,
        onFalse = onFalse {
    }

    Object evaluate(EvalContext context) {
        context.pushFuncFrame();
        condVal := cond.evaluate(context);
        if (context.yield)
            return null;
        if (condVal) {
            result := onTrue.evaluate(context);
            if (!context.yield)
                context.popFuncFrame();
            return result;
        }

        # Is there an else?
        if (onFalse) {
            result := onFalse.evaluate(context);
            if (!context.yield)
                context.popFuncFrame();
            return result;
        }

        context.popFuncFrame();
        return null;
    }
}

class VarDefValue : LimitedValue {
    String name;
    Value initializer;

    oper init(V1SrcLoc loc, String name, Value initializer) :
        LimitedValue(loc),
        name = name,
        initializer = initializer {
    }

    Object evaluate(EvalContext context) {
        val := initializer ? initializer.evaluate(context) : null;
        context.define(name, SimpleValue(val));
        return val;
    }
}

## Adapter for a variable reference (note that these are Terms in the V1 impl,
## not values).
class VarRefValue : LimitedValue {
    String name;
    oper init(V1SrcLoc loc, String name) : LimitedValue(loc), name = name {}
    Object evaluate(EvalContext context) {
        result := context.lookUp(name);
        if (result is null)
            throw Exception(
                FStr() I`lookup of $name failed at runtime.  This shouldn't \
                         happen, and is likely the result of a bug in the \
                         compiler.`
            );
        return result.evaluate(context);
    }
}

class FuncDefValue : LimitedValue {
    String name;
    Array[String] parms;
    String docs;
    Block body;

    oper init(V1SrcLoc loc, String name, Array[String] parms, String docs,
              Block body
              ) :
        LimitedValue(loc),
        name = name,
        parms = parms,
        docs = docs,
        body = body {
    }

    Object evaluate(EvalContext context) {
        result := ActiveFunc(name, context.frame.vars, parms, body, docs);
        context.define(name, result);
        return result;
    }
}

@interface Converter {
    @abstract ExprWrapper convert(Node node);
}

@abstract class Def {
    String name;

    oper init(String name) : name = name {}

    ## Return a value representing the invocation of a definition.
    @abstract Value makeValue(Converter conv, FuncCall funcCall);
}

class Variable : Def {
    oper init(String name) : Def(name) {}

    Value makeValue(Converter conv, FuncCall funcCall) {
        if (funcCall.args)
            throw Exception(
                FStr() I`$(funcCall.loc): Variable definitions accept no \
                         arguments.`
            );

        return VarRefValue(V1SrcLoc(funcCall.loc.getRow()), name);
    }
}

class Function : Def {
    oper init(String name) : Def(name) {}

    Value makeValue(Converter conv, FuncCall funcCall) {
        # XXX this isn't right, I think this needs to return a Command
        # instance corresponding to the FuncCall.
        result := Command(LiteralStringTerm(name,
                                            V1SrcLoc(funcCall.loc.getRow())
                                            )
                          );
        for (arg :in funcCall.args)
            result.args.append(conv.convert(arg).asTerm());
        return result;
    }
}

class CompileContext @impl Converter {
    class Frame : HashMap[String, Def] {
        Frame parent;
        oper init(Frame parent) : parent = parent {}

        Def lookUp(String name) {
            if (result := get(name))
                return result;
            else if (parent)
                return parent.lookUp(name);
            else
                return null;
        }
    }

    void popFrame();
    void pushFrame();

    class SubContext {
        CompileContext __ctx;
        oper init(CompileContext ctx) : __ctx = ctx {
            __ctx.pushFrame();
        }

        oper del() {
            __ctx.popFrame();
        }
    }

    Frame topFrame;

    oper init() : topFrame(null) {}

    void popFrame() {
        topFrame = topFrame.parent;
    }

    void pushFrame() {
        topFrame = Frame(topFrame);
    }

    ## Makes a subcontext (a Frame) that exists for as long as the result
    ## stays in scope.
    SubContext makeSubContext() {
        return SubContext(this);
    }

    ## Looks up the name in the lexical context, returns null if it is
    ## undefined.
    Def lookUp(String name) { return topFrame.lookUp(name) }

    void define(Def def) { topFrame[def.name] = def }

    Block _convertBlock(List list ) {
            block := Block();
            for (command :in list.getElements())
                block.add(convert(command).asValue());
        return block;
    }

    ## Compile an AST node to a value.
    ExprWrapper convert(Node node) {
        if (list := StaticList.cast(node, null)) {
            subctx := makeSubContext();
            block := _convertBlock(list);
            return LiteralObjectWrapper(block, V1SrcLoc(list.loc.getRow()));
        } else if (list := List.cast(node, null)) {
            block := _convertBlock(list);
            return BlockExprWrapper(block);
        } else if (strlit := StringLiteral.cast(node, null)) {
            return LiteralObjectWrapper(strlit.contents,
                                        V1SrcLoc(strlit.loc.getRow())
                                        );
        } else if (intlit := IntegerLiteral.cast(node, null)) {
            return LiteralObjectWrapper(IntObj(intlit.val),
                                        V1SrcLoc(intlit.loc.getRow())
                                        );
        } else if (floatlit := FloatLiteral.cast(node, null)) {
            return LiteralObjectWrapper(FloatObj(floatlit.val),
                                        V1SrcLoc(floatlit.loc.getRow())
                                        );
        } else if (stmt := IfStmt.cast(node, null)) {
            cond := convert(stmt.cond).asValue();
            onTrue := InterpExpr(_convertBlock(stmt.onTrue));
            onFalse := stmt.onFalse ? InterpExpr(_convertBlock(stmt.onFalse)) : null;
            cmd := IfStmtValue(V1SrcLoc(stmt.loc.getRow()), cond, onTrue, onFalse);
            return ValueExprWrapper(cmd);
        } else if (fc := FuncCall.cast(node, null)) {
            if (def := lookUp(fc.func.text))
                # We've got a definition.
                return ValueExprWrapper(def.makeValue(this, fc));

            # Fall through to the old-style weirdness.  This can go away
            # once all names start out in the compile context.
            # XXX This is broken for variable lookups.
            cmdTerm := VarRef(V1StringLiteral(fc.func.text,
                                                V1SrcLoc(fc.loc.getRow())
                                                )
                                );
            cmd := Command(cmdTerm);
            for (arg :in fc.args)
                cmd.args.append(convert(arg).asTerm());
            return ValueExprWrapper(cmd);
        } else if (vd := VarDef.cast(node, null)) {
            define(Variable(vd.name.text));
            return ValueExprWrapper(
                VarDefValue(V1SrcLoc(vd.loc.getRow()),
                                    vd.name.text,
                                    vd.initializer ?
                                        convert(vd.initializer).asValue() :
                                        null
                            )
            );
        } else if (fd := FuncDef.cast(node, null)) {
            define(Function(fd.name.text));
            parms := Array[String]();
            pushFrame();
            for (parm :in fd.args) {
                parms.append(parm.name.text);
                define(Variable(parm.name.text));
            }
            body := _convertBlock(fd.body);

            result := ValueExprWrapper(FuncDefValue(V1SrcLoc(fd.loc.getRow()),
                                                 fd.name.text,
                                                 parms,
                                                 null, // docs
                                                 body
                                                 )
                                    );
            popFrame();
            return result;

        } else {
            throw Exception(FStr() `Unknown AST node type: $(node.class.name)`);
        }
    }
}

ExprWrapper convert(Node node) {
    return CompileContext().convert(node);
}

class Crash2REPL : REPLBase {
    EvalContext rootCtx = createRootContext();
    CompileContext compileCtx = CompileContext();

    bool addInput(String inputData) {
        cout `$(convert(parseString(inputData)).evaluate(rootCtx))\n`;
        return true;
    }
}

if (@SCOPE_NAME == '.main') {
    import crack.sys argv;
    import .stdlib stdlib;
    import .collections collections;
    repl := Crash2REPL();
    repl.rootCtx.define('stdlib', stdlib());
    repl.rootCtx.define('collections', collections());
    if (argv.count() > 1) {
        convert(parseString(makePath(argv[1]).readAll()))
            .evaluate(repl.rootCtx);
    } else {
        repl.run();
    }
}
