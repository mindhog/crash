# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

## Container library.

import crack.cont.array Array;
import crack.cont.treemap TreeMap;
import crack.io FStr;
import crack.lang Exception;
import .crash parseBlockArg, parseString, Block, Builtin, EvalContext, Obj,
    ObjOf, ParmInfo, SimpleValue;
import .types BoolObj, IntObj, Number;

@import crack.ann cvars, impl, interface;
@import .ann function;

@abstract class Iter {
    @abstract Object elem();
    @abstract bool next();
    @final Iter iter() { return this }
}

## Common code for the iterator "block" commands.
##
## These are the commands where we apply a block to all elements provided by
## the iterator: each, map, and filter.
class IterBlockCommon {
    EvalContext __ctx;
    String __var;
    Block __block;

    oper init(String cmd, EvalContext ctx, Array[Object] args) : __ctx(ctx) {
        if (args.count() != 2)
            throw Exception(FStr() `Usage: iter $cmd <var> <block>`);

        __var = String.cast(args[0], null);
        if (__var is null)
            throw Exception(
                FStr() `Variable name in "$cmd" command must be a string`
            );

        __block = parseBlockArg(args, 1);
    }

    Object exec(Object elem) {
        Object result;
        __ctx.pushFuncFrame();
        try {
            __ctx.define(__var, SimpleValue(elem));
            result = __block.evaluate(__ctx);
            if (__ctx.yield)
                # Need to short-circuit popFuncFrame in this case.
                return null;
        } catch (Exception ex) {
            __ctx.popFuncFrame();
            throw ex;
        }
        __ctx.popFuncFrame();
        return result;
    }

    bool oper .yield() { return __ctx.yield }
}

class EachCmd : Builtin {
    Iter __iter;

    String getDoc() {
        return I'\
            Runs the block for each element provided by the iterator with the
            variable "var" defined as the element:
            iter each <var> <block>
            ';
    }

    oper init(Iter iter) : __iter = iter {}

    Object invoke(EvalContext ctx, Array[Object] args) {
        common := IterBlockCommon('each', ctx, args);

        for (elem :in __iter) {
            common.exec(elem);
            if (ctx.yield)
                return null;
        }

        return IntObj(0);
    }
}

class MapIter : Iter {

    # True
    bool __initialized;
    Object __cur;

    @cvars {
        Iter __iter;
        IterBlockCommon __common;
    }

    Object elem() {
        if (!__initialized) {
            __cur = __common.exec(__iter.elem());
            if (__common.yield)
                return null;
            __initialized = true;
        }
        return __cur;
    }

    bool next() {
        if (__iter.next()) {
            __cur = __common.exec(__iter.elem());
            if (__common.yield)
                return null;
            return true;
        } else {
            return false;
        }
    }

    bool isTrue() {
        return __iter.isTrue();
    }
}

Obj wrapIterator(Iter iter);

class MapCmd : Builtin {
    Iter __iter;

    String getDoc() {
        return I'\
            Wraps the iterator in another iterator that maps the elements
            provided to the value returned by the block:
            iter map <var> <block>
            ';
    }

    oper init(Iter iter) : __iter = iter {}

    Object invoke(EvalContext ctx, Array[Object] args) {

        # Make a copy of the current context.  This allows us to execute the
        # block in its lexical context regardless of where the iterator is
        # evaluated.  Then just return the wrapped iterator.
        return wrapIterator(
            MapIter(__iter, IterBlockCommon('map', EvalContext(ctx), args))
        );
    }
}

class FilterIter : Iter {

    # True
    bool __initialized;
    Object __cur;

    @cvars {
        Iter __iter;
        IterBlockCommon __common;
    }

    ## Updates the iterator to the first value for which the block returns
    ## true.  Returns true unless the block yielded.
    bool __findNext() {
        while (__iter && !__common.exec(__iter.elem())) {
            if (__common.yield)
                return false;
            __iter.next();
        }
        return true;
    }

    @final bool __initialize() {
        if (!__initialized) {
            if (!__findNext())
                return false;
            __initialized = true;
        }
        return true;
    }

    Object elem() {
        if (!__initialize())
            return null;
        return __iter.elem();
    }

    bool next() {
        return __iter.next() && __findNext() && __iter;
    }

    bool isTrue() {
        if (!__initialize())
            return false;
        return __iter.isTrue();
    }
}

class FilterCmd : Builtin {
    Iter __iter;

    String getDoc() {
        return I'\
            Wraps the iterator in another iterator that consists only of
            elements for which the block evaluates to true.
            iter filter <var> <block>
            ';
    }

    oper init(Iter iter) : __iter = iter {}

    Object invoke(EvalContext ctx, Array[Object] args) {

        # See comments in Map.
        return wrapIterator(
            FilterIter(__iter,
                       IterBlockCommon('filter', EvalContext(ctx), args)
                       )
        );
    }
}

## Wrap an iterator in an object.
Obj wrapIterator(Iter iter) {

    ## Returns the current element that the iterator is referencing.
    @function(Iter) Object elem() {
        return self.elem();
    }

    ## Forwards the iterator to the next element, return false if there
    ## are no more elements.
    @function(Iter) bool next() {
        return self.next();
    }

    ## Count all of the elements and return the count.
    @function(Iter) int count() {
        int result;
        for (; self; self.next())
            ++result;
        return result;
    }

    result := ObjOf[Iter](iter);
    result.define('elem', elem(iter));
    result.define('next', next(iter));
    result.define('count', count(iter));
    result.define('each', EachCmd(iter));
    result.define('map', MapCmd(iter));
    result.define('filter', FilterCmd(iter));
    return result;
}

@function(Array[Object]) Obj Array_iter() {
    class ArrayIter : Iter {
        Array[Object].ArrayIter __iter;
        oper init(Array[Object].ArrayIter iter) : __iter = iter {}
        Object elem() { return __iter.elem() }
        bool next() { return __iter.next() }
        bool isTrue() { return __iter.isTrue() }
    }

    return wrapIterator(ArrayIter(self.iter()));
}

@function(Array[Object]) int Array_count() {
    return self.count();
}

@function(Array[Object]) Object Array_get(int index) {
    return self[index];
}

alias ArrayObj = ObjOf[Array[Object]];
ArrayObj makeArrayObj(Array[Object] array);

## Append a new element to an array, returns the array.
@function(Array[Object]) ArrayObj Array_append(Object elem) {
    self.append(elem);
    return makeArrayObj(self);
}

## Insert a new element at a specific index in the array, returns the array.
@function(Array[Object]) ArrayObj Array_insert(int index, Object elem) {
    self.insert(index, elem);
    return makeArrayObj(self);
}

## Delete the element at the given index in  the array, returns the array.
@function(Array[Object]) ArrayObj Array_delete(int index) {
    self.delete(index);
    return makeArrayObj(self);
}

ArrayObj makeArrayObj(Array[Object] array) {
    result := ObjOf[Array[Object]](array);
    result.define('iter', Array_iter(array));
    result.define('count', Array_count(array));
    result.define('get', Array_get(array));
    result.define('append', Array_append(array));
    result.define('insert', Array_insert(array));
    result.define('delete', Array_delete(array));
    return result;
}

class ArrayCmd : Builtin {
    String getDoc() {
        return I'\
            Returns a new array with the arguments as contents:
            array [arg...]
            ';
    }

    Object invoke(EvalContext context, Array[Object] args) {
        return makeArrayObj(args);
    }
}

## Create an array from the elements produced by the iterator.
@function Obj arrayOf(Iter iter) {
    result := Array[Object]();
    for (elem :in iter)
        result.append(elem);
    return makeArrayObj(result);
}

alias ObjectMap = TreeMap[Object, Object];
alias ObjectMapNode = ObjectMap.Node;
alias ObjectMapIter = ObjectMap.Iter;

@function(ObjectMapNode) Object MapItem_key() {
    return self.key;
}

@function(ObjectMapNode) Object MapItem_val() {
    return self.val;
}

Obj makeItemObj(ObjectMapNode node) {
    result := ObjOf[ObjectMapNode](node);
    result.define('key', MapItem_key(node));
    result.define('val', MapItem_val(node));
    return result;
}

class MapObjIter : Iter {
    @cvars {
        ObjectMapIter __iter;
    }
    Object elem() { return makeItemObj(__iter.elem()) }
    bool next() { return __iter.next() }
    bool isTrue() { return __iter.isTrue() }
}

## Returns an iterator over the elements of a map.
@function(ObjectMap) Obj Map_iter() {
    return wrapIterator(MapObjIter(self.iter()));
}

## Returns the number of items in the map.
## map count
@function(ObjectMap) int Map_count() {
    return self.count();
}

## Returns the element referenced by the given key.
## map get <key>
@function(ObjectMap) Object Map_get(Object key) {
    return self.get(key);
}

## Put a new key/value pair into the map:
## map put <key> <val>
@function(ObjectMap) Object Map_put(Object key, Object val) {
    self[key] = val;
    return val;
}

Obj makeMapObj(ObjectMap map) {
    result := ObjOf[ObjectMap](map);
    result.define('iter', Map_iter(map));
    result.define('count', Map_count(map));
    result.define('get', Map_get(map));
    result.define('put', Map_put(map));
    return result;
}

## The "map" command in global scope creates a TreeMap object.
class MapConstructorCmd : Builtin {
    String getDoc() {
        return I'\
            Returns a new tree-map with the arguments as key value pairs:
            map <key> <val> ...
            ';
    }

    Object invoke(EvalContext context, Array[Object] args) {
        if (args.count() % 2)
            throw Exception('"map" requires key value pairs (arg count '
                            'is not divisible by two)');

        result := ObjectMap();

        # Use 'this' as a sentinel.
        Object key = this;
        for (arg :in args) {
            if (key is this) {
                key = arg;
            } else {
                result[key] = arg;
                key = this;
            }
        }

        return makeMapObj(result);
    }
}

class RangeCmd : Builtin {
    String getDoc() {
        return I'\
            Returns an interator over a range of integer values.
            range <start> <end> [step]

            Must be called with a start and end, can also be called with an
            optional step (defaults to 1) indicating the amount to increment
            the range.

            The start and end value are the first and last values iterated by
            the range.
            ';
    }

    class RangeIter : Iter {
        @cvars {
            Number start;
            Number end;
            Number step;
            Number cur;
        }

        Object elem() {
            return cur;
        }

        bool isTrue() {
            return cur <= end;
        }

        bool next() {
            if (cur <= end) {
                cur = cur.plus(step);
                return true;
            } else {
                return false;
            }
        }
    }

    Object invoke(EvalContext context, Array[Object] args) {
        if (args.count() < 2 || args.count() > 3)
            throw Exception('Usage: range <start> <end> [step]');

        start := Number.convertNum(args[0]);
        end := Number.convertNum(args[1]);
        Number step;
        if (args.count() == 3)
            step = Number.convertNum(args[2]);
        else
            step = IntObj(1);

        return wrapIterator(RangeIter(start, end, step, start));
    }
}

@function Obj collections() {
    result := Obj();
    result.define('array', ArrayCmd());
    result.define('arrayOf', arrayOf());
    result.define('map', MapConstructorCmd());
    result.define('range', RangeCmd());
    return result;
}
