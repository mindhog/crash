# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import crack.ext._readline add_history, readline, using_history;
import crack.io cerr;
import crack.lang Exception;
import crack.runtime strlen;

import .crash createRootContext, eval, EvalContext;

# Make sure history is initialized.
bool _initialized;
void initialize() {
    if (!_initialized) {
        using_history();
    }
}

void repl(EvalContext root) {

    # Initialize history and create the root context.
    initialize();

    # Do the loop.
    while (true) {
        raw := readline('$ '.buffer);
        if (raw is null)
            return;
        add_history(raw);

        try {
            result := eval(String(raw, strlen(raw), true), root);
            cerr `$result\n`;
        } catch (Exception ex) {
            cerr `Got an exception: $ex\n`;
        }
    }
}

void repl() {

    root := createRootContext();
    repl(root);

}

## Abstract base class to allow implementing a REPL for a specific parser
## implementation.
@abstract class REPLBase {

    ## Add user input to the parser.  Returns true if the input is "complete"
    ## (i.e. not part of a multi-line command) and false if not, which will
    ## result in a different prompt.
    @abstract bool addInput(String inputData);

    ## Run the repl until the user enters an end-of-file.
    void run() {
        initialize();

        bool useInitialPrompt = true;
        while (true) {
            raw := readline(useInitialPrompt ? '$ '.buffer : '> '.buffer);

            if (raw is null)
                return;
            add_history(raw);

            try {
                useInitialPrompt = addInput(String(raw, strlen(raw), true));
            } catch (Exception ex) {
                cerr `Got an exception: $ex\n`;
            }
        }
    }
}
