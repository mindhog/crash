
import crack.ext._readline add_history, readline, using_history;
import crack.io cerr;
import crack.lang Exception;
import crack.runtime strlen;

import .crash createRootContext, eval, EvalContext;

# Make sure history is initialized.
bool _initialized;
void initialize() {
    if (!_initialized) {
        using_history();
    }
}

void repl(EvalContext root) {

    # Initialize history and create the root context.
    initialize();

    # Do the loop.
    while (true) {
        raw := readline('$ '.buffer);
        if (raw is null)
            return;
        add_history(raw);

        try {
            result := eval(String(raw, strlen(raw), true), root);
            cerr `$result\n`;
        } catch (Exception ex) {
            cerr `Got an exception: $ex\n`;
        }
    }
}

void repl() {

    root := createRootContext();
    repl(root);

}
