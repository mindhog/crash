# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

## General language model features.

import crack.cont.array Array;
import crack.cont.hashmap HashMap;
import crack.cont.treemap TreeMap;
import crack.lang FieldSet;
import crack.io cerr, Formatter, FStr;
import crack.lang AssertionError, Exception;
import .ast DynamicList, Expr, FieldRef, FloatLiteral, ForStmt, FuncCall,
    FuncDef, Ident, InferredType, IfStmt, IntegerLiteral, List, Node,
    NominalType, StaticList, StringLiteral, TypeSpec, VarDef, VarRef,
    Visitor, VisitorImpl;

@import crack.ann assert, cvars, impl;
@import crack.fieldset_ann fieldset_accessors;

class Type;

@abstract class Def {
    @cvars {
        String name;
    }

    @abstract Type getType();
}

class Type : Def {
    @fieldset_accessors(Type)

    oper init(String name) : Def(name) {}

    bool compatibleWith(Type other) {
        return this is other;
    }

    ## Return the type name to be displayed in error messages.
    String getDisplayName() {
        return name;
    }

    ## Returns true if the type is a FuncType.
    bool isFuncType() { return false }

    ## TODO: implement to return a meta-type.
    Type getType() { return null }
}

## A composite type is an instantiated GenericType.
class CompositeType : Type {
    Array[Type] typeParms;
    oper init(String name, Array[Type] typeParms) :
        Type(name), typeParms = typeParms {
    }
}

class FuncType : CompositeType {
    String name;

    ## Construct a FuncType from its type vector, consisting of the return
    ## type followed by the arg types.
    oper init(String name, Array[Type] types) :
        CompositeType(name, types) {
    }
}

class GenericType : Def {
    HashMap[Array[Type], CompositeType] __concreteTypes =
        HashMap[Array[Type], CompositeType]();

    oper init(String name) : Def(name) {}

    ## Returns true if the generic is a function generic.
    bool isFuncType() {
        return false;
    }

    ## Obtain a CompositeType from the generic with the given parameters.
    ##
    ## This may consume typeParms, so typeParms should not be modified after
    ## calling this.
    CompositeType get(Array[Type] typeParms) {
        concreteType := __concreteTypes.get(typeParms);
        if (!concreteType)
            __concreteTypes[typeParms] = concreteType =
                isFuncType() ? FuncType(name, typeParms) :
                               CompositeType(name, typeParms);
        return concreteType;
    }

    ## TODO: return a generic meta-type.
    Type getType() { return null }
}

## Type for generic functions (which are either plain functions or generics
## implementing "oper call" for some array of types).
class GenericFuncType : GenericType {
    oper init(String name) : GenericType(name) {}

    bool isFuncType() {
        return true;
    }
}

class Var : Def {
    @fieldset_accessors(Var);
    Type type;

    ## Variable initializer or null.
    ##
    ## It's not clear how this should be defined, it may be specific to the
    ## code generator -- in other words, we may want to allow the code
    ## generator to store whatever kind of object is useful for generating the
    ## default value here.  For now, we're going with an expression.
    Expr initializer;

    oper init(String name, Type type) : Def(name), type = type {}

    Type getType() { return type }
}

## Tracks information about the current return type.  This may be modified by
## return statements if it was not explicitly declared.
class ReturnType {

    ## The return type of the current context.  May be null if a return type
    ## hasn't been discovered yet.
    Type returnType;

    ## If true, the return type was explicitly declared.  If false, it was
    ## inferred and may be replaced by the most specific compatible type.
    bool explicitReturnType;

    oper init(Type returnType) : returnType = returnType {}
}

class DefMap : TreeMap[String, Def] {

    ## Tracks the current return type.  This may be null if we are not in a
    ## function scope.
    ReturnType returnType;

    oper init(DefMap parent) {
        if (parent)
            returnType = parent.returnType;
    }
}

class Func : Def {
    Type returnType;
    Array[Var] args;

    oper init(String name, Type returnType, Array[Var] args) :
        Def(name),
        returnType = returnType,
        args = args {
    }

    Type getType() {
        # TODO: should be extracting this from the GenericFuncType.
        types := Array[Type]![returnType];
        for (arg :in args)
            types.append(arg.getType());
        return FuncType(name, types);
    }
}

class Error : Exception {
    oper init(String text) : Exception(text) {}
}

class CompileContext {
    Type stringLiteralType, integerLiteralType, floatLiteralType;
    GenericFuncType functionType;
    DefMap defs;
    Array[DefMap] stack = {};

    oper init() {}

    @static CompileContext makeGlobal() {
        ctx := CompileContext();
        ctx.defs = DefMap(null);
        ctx.defs['String'] = ctx.stringLiteralType = Type('String');
        ctx.defs['Int'] = ctx.integerLiteralType = Type('Int');
        ctx.defs['UInt'] = Type('UInt');
        ctx.defs['Float'] = ctx.floatLiteralType = Type('Float');
        ctx.defs['Function'] = ctx.functionType = GenericFuncType('Function');
        ctx.stack.append(ctx.defs);
        return ctx;
    }

    void define(Def def) {
        defs[def.name] = def;
    }

    ## Returns null if the name is undefined.
    Def lookUp(String name) {
        for (int i = stack.count() - 1; i > -1; --i) {
            def := stack[i].get(name);
            if (def)
                return def;
        }
        return null;
    }

    ## Push a new nested context.
    void pushNew() {
        stack.append(defs = DefMap(defs));
    }

    ## Pop a new new nested context.
    void pop() {
        stack.pop();
    }

    ## Set the return type of the current context.
    void setExplicitReturnType(Type returnType) {
        @assert(!defs.returnType);
        defs.returnType = ReturnType(returnType);
    }

    ## Set the inferred return type.  This gets called when we encounter a
    ## return statement.
    ## - if there is an explicit return type for the context, this just
    ##   verifies that the new type is compatible with it.
    ## - if there is already an implicit return type for the context, this
    ##   sets the return type to the most specific type that is compatible
    ##   with both.
    void setInferredReturnType(Type returnType) {
        # Make sure we're in a context that allows a return.
        if (!defs.returnType)
            throw Error(I'Return is not allowed in a non-function context.');

        # If there's currently no return type, set it now.
        info := defs.returnType;
        if (!info.returnType) {
            info.returnType = returnType;
            return;
        }

        # If there's an explicit return type, make sure that the inferred
        # return type is compatible.
        if (info.explicitReturnType) {
            if (!returnType.compatibleWith(info.returnType))
                throw Error(FStr() I`Type $returnType is not compatible with \
                                     the defined return type of \
                                     $(info.returnType)`);
            return;
        }

        # There's an implicit return type.

        # If the new type is compatible, we're done.
        if (returnType.compatibleWith(info.returnType))
            return;

        # If the existing return type is compatible with the new type, change
        # it to the new type.
        else if (info.returnType.compatibleWith(returnType))
            info.returnType = returnType;

        # Otherwise we have to find the most specific common ancestor type.
        # TODO: implement
        else
            throw Error(I'XXX common ancestor discovery not implemented yet.');
    }
}

Array[Type] typesFromArgs(Array[Var] vars) {
    result := Array[Type]();
    for (var :in vars)
        result.append(var.type);
    return result;
}

## T must extend VisitorReturnTypes.
class TypeCheckVisitor : VisitorImpl {

    Formatter err() { return cerr }

    @cvars {
        CompileContext context;
    }

    void onVarRef(VarRef varRef) {
        var := context.lookUp(varRef.var.text);
        var.getType().putIn(varRef);
    }

    #void onFuncCall(FuncCall funcCall) {
    #    VisitorImpl.onFuncCall();
    #    func := Func.get(funcCall);
    #    for (arg :in func.args)
    #}

    void onNominalType(NominalType type) {
        VisitorImpl.onNominalType(type);
        def := context.lookUp(type.name.text);
        Type declaredType;
        if (!def)
            err() `Undefined type $(type.name.text)`;
        else if (!(declaredType = Type.cast(def, null)))
            err() `$(type.name.text) is not a type`;
        declaredType.putIn(type);
    }

    void onVarDef(VarDef varDef) {
        VisitorImpl.onVarDef(varDef);

        Type type;

        if (varDef.type) {
            type = Type.get(varDef.type);
            if (varDef.initializer) {
                # Make sure this is compatible with the initializer type.
                initializerType := Type.get(varDef.initializer);
                if (!initializerType.compatibleWith(type))
                    err() I`Expression of type \
                            $(initializerType.getDisplayName()) can not \
                            be used as initializer for variable of type \
                            $(type.getDisplayName())`;
            }
        } else {
            type = Type.get(varDef.initializer)
        }

        context.define(var := Var(varDef.name.text, type));
        type.putIn(varDef);
        var.putIn(varDef);
    }

    void onStringLiteral(StringLiteral lit) {
        context.stringLiteralType.putIn(lit);
    }

    void onIntegerLiteral(IntegerLiteral lit) {
        context.integerLiteralType.putIn(lit);
    }

    void onFloatLiteral(FloatLiteral lit) {
        context.floatLiteralType.putIn(lit);
    }

    void onFuncDef(FuncDef funcDef) {
        context.pushNew();
        onIdent(funcDef.name);

        args := Array[Var]();
        for (arg :in funcDef.args) {
            onVarDef(arg);
            args.append(Var.get(arg));
        }

        # Will populate the return type.
        onTypeSpec(funcDef.returnType);
        retType := funcDef.returnType ? Type.get(funcDef.returnType) : null;
        context.setExplicitReturnType(retType);

        onStaticList(funcDef.body);

        # If there was no return type, use the last value type in the body.
        if (!retType)
            retType = Type.get(funcDef.body);

        func := Func(funcDef.name ? funcDef.name.text : null, retType, args);
        if (funcDef.name)
            context.define(func);
        context.pop();
        type := context.functionType.get(typesFromArgs(args));
        type.putIn(funcDef);
    }
}

void checkTypes(Node expr) {
    TypeCheckVisitor(CompileContext.makeGlobal()).onExpr(Expr.cast(expr));
}
