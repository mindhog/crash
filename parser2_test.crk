# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import parser parseString;
import crack.io cerr, FStr;

@import crack.ann assert;

String str(Object obj) { return FStr() `$obj` }

## Assert that "original" when parsed using zulref syntax reformats to
## "reformatted" in sparse modern syntax.
void assertReformatted(String original, String reformatted) {
    @assert(str(parseString(original)) == reformatted);
}

assertReformatted("if x { print 'yes' } else { print 'no' }",
                  "if (x) {print('yes')} else {print('no')}"
                  );
assertReformatted("if (foo 'bar') { print 'yes' } else { print 'no' }",
                  "if (foo('bar')) {print('yes')} else {print('no')}"
                  );

assertReformatted("x : foo = 100", "x : foo = 100");
assertReformatted("x := 100", "x := 100");
assertReformatted("x : foo", "x : foo");
assertReformatted("x := y", "x := y");
assertReformatted("x := y 1 2 3", "x := y(1, 2, 3)");
assertReformatted("x := (y)", "x := y()");
assertReformatted("func foo(x: String) : String { 'test' }",
                  "func foo(x : String) : String {'test'}");
assertReformatted("func foo() : String { 'test' }",
                  "func foo() : String {'test'}");
assertReformatted("func foo(x: String) { 'test' }",
                  "func foo(x : String) {'test'}");
assertReformatted("func(x: String) { 'test' }",
                  "func (x : String) {'test'}");
assertReformatted("foo.bar", 'foo.bar()');
assertReformatted("foo.bar baz.bar", 'foo.bar(baz.bar)');

cerr `ok\n`;

