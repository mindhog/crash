
import crack.cont.array Array;
import crack.io cout, cerr, Formatter;
import crack.lang cmp;
import crash createRootContext, eval, Builtin, EvalContext;
import repl repl;

@import ann function;
@import crack.ann assert;

class IntObj {
    int val;
    oper init(int val) : val = val {}
    void formatTo(Formatter out) {
        out `$val`;
    }

    int cmp(IntObj other) {
        return cmp(val, other.val);
    }

    int cmp(Object other) {
        if (other := IntObj.cast(other, null))
            return cmp(other);
        else
            return Object.cmp(other);
    }
}

class FloatObj {
    float val;
    oper init(float val) : val = val {}
    void formatTo(Formatter out) {
        out `$val`;
    }

   int cmp(IntObj other) {
        return cmp(val, other.val);
    }

    int cmp(Object other) {
        if (other := IntObj.cast(other, null))
            return cmp(other);
        else
            return Object.cmp(other);
    }
}

@function int strlen(String name) {
    return name.size;
}

root := createRootContext();
root.define('strlen', strlen());

@assert(eval('strlen foobar', root) == IntObj(6));
cout `ok\n`;


