# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import crack.cont.array Array;
import crack.io cout, cerr, Formatter, FStr;
import crack.lang cmp, Box, Exception;
import crash createRootContext, eval, Builtin, CrashError, EvalContext, Obj,
    ObjOf, ParmInfo, Value;
import types IntObj, BoolObj, FloatObj;
import repl repl;

@import ann function, method;
@import crack.ann assert;

@function int strlen(String name) {
    return name.size;
}

@function float addPointFive(float val) {
    return val + 0.5;
}

@function bool negate(bool val) {
    return !val;
}

class Foo {
    alias Int = int;
}

@function(Foo.Int) int meth() {
    return self;
}

root := createRootContext();
root.define('strlen', strlen());
root.define('addPointFive', addPointFive());
root.define('negate', negate());

@function int getInt(int val) { return val }
root.define('getInt', getInt());
@function float getFloat(float val) { return val }
root.define('getFloat', getFloat());
@function bool getBool(bool val) { return val }
root.define('getBool', getBool());

# Check built-in ParmInfo
@assert(strlen().getParmInfo() ==
         Array[ParmInfo]![ParmInfo.create('name', String)]
        );
@assert(addPointFive().getParmInfo() ==
         Array[ParmInfo]![ParmInfo.create('val', float)]
        );
@assert(meth(100).getParmInfo() == Array[ParmInfo]![]);

# Define a method.
o := Obj();
o.define('meth', meth(100));
root.define('obj', o);

@assert(eval('strlen foobar', root) == IntObj(6));
@assert(eval('addPointFive 1.0', root) == FloatObj(1.5));
@assert(eval('$obj meth', root) == IntObj(100));

@assert(eval('getInt [getInt 100]', root) == IntObj(100));
@assert(eval('getFloat [getFloat 1.1]', root) == FloatObj(1.1));
@assert(eval('getBool [getBool true]', root) == BoolObj(true));

@function Obj makeObj() {
    class Foo {}

    @function(Foo) int die() {
        throw Exception('some text');
    }

    obj := Obj();
    obj.define('die', die(Foo()));

    return obj;
}

root.define('makeObj', makeObj());

try {
    eval('[makeObj] die', root);
    @assert(false);
} catch (CrashError ex) {
    @assert(ex.text.endsWith('some text\n'));
}

# Test automatic conversion.
Value wrapFoo(EvalContext context, Object foo) {
    obj := Obj();
    self := Foo.cast(foo);
    @function(Foo) String method() { return 'ok' }
    obj.define('method', method(self));
    return obj;
}
@function Foo makeFoo() { return Foo() }
root.define('Foo', makeFoo());
root.defineConverter(Foo, wrapFoo);
@assert(eval('var f [Foo]; f method', root) == 'ok');
@assert(eval('[Foo] method', root) == 'ok');

## Doc line 1
## Doc line 2
@function int withDocs() { return 0 }
@assert(withDocs().getDoc() == ' Doc line 1\012 Doc line 2\012');

@assert(makeFoo().getDoc() == '');

# Test that we can convert to a base class.

class A {
    int val;
    oper init(int val) : val = val {}
}

class B : A {
    oper init(int val) : A(val) {}
}

alias BObj = ObjOf[B];
@function BObj makeB(int val) {
    return ObjOf[B](B(val));
}

@function int getAVal(A a) {
    return a.val;
}

@function bool isObjOfB(Object a) {
    return a.isa(ObjOf[B]);
}

root.define('B', makeB());
root.define('getAVal', getAVal());
root.define('isObjOfB', isObjOfB());
@assert(eval('getAVal [B 100]', root) == IntObj(100));

# Verify that crash objects can be used as crack objects.
@function String formatObj(Object obj) {
    return FStr() `$obj`;
}
root.define('formatObj', formatObj());
@assert(eval('formatObj [object {}]', root) == 'Obj([])');

# Verify that we throw an exception when unable to convert.
try {
    eval('getAVal die', root);
    @assert(false && 'No exception thrown on bad object type.');
} catch (CrashError ex) {
}

# Verify that we don't do conversions when the parameter type is a base class
# of ObjOf.
@assert(eval('isObjOfB [B 100]', root));

# Verify new-style methods, wrap and ctx flags.
if (true) {
    alias BoxObj = ObjOf[Box[int]];

    @method(Box[int], wrap) BoxObj testMethod(int newVal) {
        self.val = newVal;
        return wrap;
    }

    @function(ctx) EvalContext getContext() { return ctx }
    @function(Box[int], wrap, ctx) ObjOf[Box[int]] theWorks() {
        self.val = ctx ? 1 : 0;
        return wrap
    }

    proto := Obj();
    proto.define('testMethod', testMethod());

    rootCtx := createRootContext();
    inner := Box[int](100);
    obj := BoxObj(inner);
    obj.parent = proto;
    obj.define('theWorks', theWorks(inner));
    rootCtx.define('obj', obj);
    rootCtx.define('getContext', getContext());
    result := eval('obj testMethod 200', rootCtx);
    @assert(result is obj);
    @assert(inner.val == 200);

    @assert(eval('getContext', rootCtx).isa(EvalContext));
    result = eval('obj theWorks', rootCtx);
    @assert(result is obj);
    @assert(inner.val == 1);
}

cout `ok\n`;


