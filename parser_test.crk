import crack.io cerr, cout, FStr;
import .ast FuncCall, List, SrcLoc;
import .parser parseString;
@import crack.ann assert;

test := "echo 'hello world' { echo 'foo' }; echo 'goodbye'";
actual := FStr() `$(parseString(test))`;
expected := "echo 'hello world' {echo 'foo';};echo 'goodbye';";
@assert(actual == expected);
@assert(FStr() `$(parseString(expected))` == expected);

# Verify that names in an arg list parse as plain names.
@assert(FStr() `$(parseString("echo var1 var2 (command var3)"))` ==
        'echo var1 var2 (command var3;);'
        );

script := I"\
    foo 'this is foo'
    do {
        nested 'command' 'other'
    }
    ";
tree := List.cast(parseString(script));
@assert(tree.loc == SrcLoc('filename', 1, 0));
@assert(tree.getElements()[1].loc == SrcLoc('filename', 2, 0));
doArg := List.cast(FuncCall.cast(tree.getElements()[1]).args[0]);
nested := FuncCall.cast(doArg.getElements()[0]);
@assert(nested.func.loc == SrcLoc('filename', 3, 4));
@assert(nested.args[0].loc == SrcLoc('filename', 3, 11));
@assert(nested.args[1].loc == SrcLoc('filename', 3, 21));

# Test the beginning-of line case

cout `ok\n`;
