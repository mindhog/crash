# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import crack.io cout, cerr;
import crack.lang Exception;
import crash createRootContext, eval, parseString;
import collections collections;
import types IntObj;

@import crack.ann assert;

Object ev(String code) {
    ctx := createRootContext();
    ctx.define('collections', collections());
    eval("
      import [collections] array arrayOf map
      var result ''
      def p {v} {
        set result [format $result $v]
      }
      ", ctx);
    return eval(code, ctx);
}

@assert(ev("
    [[array 1 2 3 4] iter] each x { p $x }
    give $result
    ") == '1234');

@assert(ev("
    [[[array 1 2 3 4] iter] map x { + $x 1 }] each x { p $x }
    give $result
    ") == '2345');

@assert(ev("
    [[[array 1 2 3 4] iter] filter x {% $x 2}] each x { p $x }
    give $result
    ") == '13');

@assert(ev("
    [[[array 1 2 3 4] iter] filter x {== $x 100}] each x { p $x }
    give $result
    ") == '');

@assert(ev("
    var arr [arrayOf [[array 1 2 3 4] iter]]
    [arr iter] each x { p $x }
    give $result
    ")  == '1234');

@assert(ev("[array 1 2 3] count") == IntObj(3));
@assert(ev("[array] count") == IntObj(0));
@assert(ev("[[array 1 2 3] iter] count") == IntObj(3));
@assert(ev("[[array] iter] count") == IntObj(0));

@assert(ev("[[map first 100 second 200] iter] each x {
                p [x key]
                p [x val]
            }
            give $result") == 'first100second200');

@assert(ev("var m [map a 1 b 2]; m get a") == '1');
@assert(ev("var m [map a 1 b 2]; m put a xxx; m get a") == 'xxx');
@assert(ev("[map a 1 b 2] count") == IntObj(2));

cerr `ok\n`;

