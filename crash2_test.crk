# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import crack.io cerr;
import .crash createRootContext, Obj;
import .crash2 convert;
import .parser parseString;

@import crack.ann assert;

Object eval(String script) {
    return convert(parseString(script)).evaluate(createRootContext());
}

@assert(eval("if 1 { 'ok' }") == 'ok');
@assert(eval("if 0 { 'ok' }") is null);
@assert(eval("x := 'ok'") == 'ok');
@assert(eval("x : String = 'ok'; give x") == 'ok');
@assert(eval("x := 0; if x { 'bad' } else { 'ok' }") == 'ok');
@assert(eval("x := 1; if x { 'ok' } else { 'bad' }") == 'ok');
@assert(eval("
    func f(arg: String) : String { give arg }
    f 'ok'") == 'ok');
@assert(eval("
    o := object { func f(arg: String) { give arg } }
    o.f 'this is a test'") == 'this is a test');

# This is intended behavior for now, as "field references" are basically
# subcommands in classic crash.
@assert(eval("
    o := object { x := 100 }
    format o.x") == 'Obj([])');

cerr `ok\n`;
